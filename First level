package Algorhytm;

import java.util.Arrays;

public class HomeWorkLesson3 {
    public static void main(String[] args) {
        System.out.println(degree(2, 2));
        System.out.println(degree(2, 1));
        System.out.println(degree(2, 0));
        System.out.println(degree(2, -1));
        System.out.println("_______________________________");

        int[] arr1 = {100, 112, 256, 349, 770};
        int[] arr2 = {72, 86, 113, 119, 265, 445, 892};
        System.out.println(findElement(arr1, arr2, 6));
        System.out.println("_______________________________");

        int [] a = {1, 1, 2, 2, 2, 2, 3,};
        System.out.println(counter(a,2));
        System.out.println("_______________________________");
    }

    //  First level: 1.Даны два целых числа x и n, напишите функцию для вычисления x^n (x в степени n)
//Первое решение выполнить рекурсивно за временную сложность O(n) - лиейная
//Второе решение это улучшить решение 1 до временной сложности O(log n) логарифмическая

    public static double degree(double x, double n) {
        if (n == 0)
            return 1;
        else if (n == 1)
            return x;
        else if (n > 1)
            return Math.pow(x, n);
        else
            return x * Math.pow(x, n - 1);
    }

    // Имея два отсортированных массива размера m и n соответственно, вам нужно найти элемент,
    //который будет находиться на k-й позиции в конечном отсортированном массиве.
    //Массив 1 - 100 112 256 349 770
    //Массив 2 - 72 86 113 119 265 445 892
    //к = 7
    //Вывод : 256
    //Окончательный отсортированный массив -
    //72, 86, 100, 112, 113, 119, 256, 265, 349, 445, 770, 892
    //7-й элемент этого массива равен 256.

    public static int findElement(int[] arr1, int[] arr2, int index) {
        int[] arr = new int[arr1.length + arr2.length];
        System.arraycopy(arr1, 0, arr, 0, arr1.length);
        System.arraycopy(arr2, 0, arr, arr1.length, arr2.length);
        for (int i = 0; i < arr.length; i++) {
            Arrays.sort(arr);
        }
        return arr[index];
    }

    // Имея отсортированный массив arr[] и число x, напишите функцию, которая подсчитывает вхождения x в arr[].
    //    Ожидаемая временная сложность O(log n)
    //    arr[] = {1, 1, 2, 2, 2, 2, 3,}
    //    x = 2
    //    Вывод: 4 раза

    public static int counter (int [] arr, int b){
        int c = 0;
        for (int i = 0; i < arr.length; i++){
            if (arr[i] == b){
                c++;
            }
        }
        return c;
    }
}
